<?php
declare(strict_types=1);
//############################################################################
class files 
{
    static public  $permission =   0775;

    //############################################################################
    //general
	static public function isValidUrl(string $url):bool						{$array_schemas=array("http","https","ftp","sftp","tls","ssl","tcp","imap","mailto","telnet","udp","sslv2","sslv3");$loop=sizeof($array_schemas);$found=false;for($n=0;$n<$loop;$n++){$len=strlen($array_schemas[$n]);if(substr(strtolower($url),0,$len)===$array_schemas[$n]){$found=true;break;}}if(!$found){return false;} $count = substr_count($url, '://');if($count>=2){return false;}if(filter_var($url, FILTER_VALIDATE_URL)) {return true;}else{return false;}}
    static public function standardizePath(string $str):string	            {$str=str_replace("\\","/",$str);$tempStr = str_replace(" ","%20",$str);if(self::isValidUrl($str) or self::isValidUrl($tempStr)){$str = preg_replace('/([^:])(\/{2,})/', '$1/', $str);}else{$str=preg_replace( '{\\/+}', '/',$str );}return rtrim($str,"/");}
    static public function temporaryPath(string $ext="txt"):string		    {$path = settings::server()['tempFolder']."/";$path .=  connection::$databaseName."_";$path .=  md5("k".(string)uniqid((string)mt_rand(),true));$path .=  ".".$ext; return self::standardizePath($path);}

    //############################################################################
    //path <-> url conversion
    static public function urlToPath(string $url,bool $removeQueryString=true):string	{ $path=self::standardizePath($url);$rootFolder=self::standardizePath(sys::$arrayParams['rootFolder']); $rootWeb= self::standardizePath(sys::$arrayParams['rootWeb']); $path=str_replace($rootWeb,$rootFolder,$path); if($removeQueryString){$path =   strtok($path, '?');}return $path;} 
    static public function pathToUrl(string $path):string				                { $path=self::standardizePath($path);$rootFolder=self::standardizePath(sys::$arrayParams['rootFolder']);$rootWeb=self::standardizePath(sys::$arrayParams['rootWeb']);$url=str_replace($rootFolder,$rootWeb,$path);return $url;}	

    //############################################################################
    //folder operations
    static public function createDir(string $dir,bool $isRecursive=true)                 {$dir = self::standardizePath($dir);if(is_dir($dir)){return;} if($isRecursive){$arrayDir = explode("/",$dir); $loop=      sizeof($arrayDir); $arrNew=    array(); for($n=0;$n<$loop;$n++) {if(sys::length($arrayDir[$n])==0){continue;}array_push($arrNew,$arrayDir[$n]);$newDir = implode("/",$arrNew); if(!is_dir($newDir)) { self::createDir($dir,false); return; }}}try {if (!mkdir($dir, self::$permission, true)) { sys::error('Failed to create folder '.$dir);  } } catch (Exception $e) {sys::error('Exception: '.$e->getMessage());}} 
	static public function returnFiles(string $dir):array				                 {$dir=self::standardizePath($dir);$dir = rtrim($dir,"/"); $arrayOut=	array(); $dirs = array($dir); if(!is_dir($dir)){return $arrayOut;}$i = 0;while($i<count($dirs)){$d = opendir($dirs[$i]);while ($f = readdir($d)) {$path_item=$dirs[$i]."/".$f;if((is_dir($path_item)) and $f !== "." and $f !== ".."){array_push($dirs,$dirs[$i]."/".$f);} elseif($f !== "." and $f !== ".."){array_push($arrayOut,$path_item);}} closedir($d);$i = $i + 1;} return $arrayOut;}
    static public function returnFolders(string $dir, bool $includeSub=false):array		 {$dir=self::standardizePath($dir);if(!is_dir($dir)){return [];}$dirs = glob($dir.'/*' ,GLOB_ONLYDIR); if($includeSub){ $len = sizeof($dirs); for($n=0;$n<$len;$n++){ $subDirs = self::returnFolders($dirs[$n],$includeSub); $dirs = array_merge($dirs,$subDirs); }}if($includeSub){sort($dirs);}return $dirs;}
	static public function removeFolder(string $srcDir) 				                 {if(!is_dir($srcDir)){ return; } $dir = opendir($srcDir);while(false !==( $file = readdir($dir))) {if(( $file != '.' ) && ( $file != '..' )){$full = $srcDir.'/'.$file;if(is_dir($full)) {self::removeFolder($full);}else{unlink($full);}}}closedir($dir);rmdir($srcDir);}
    static public function folderSize(string $dir):int                                   {$size = 0;foreach (glob(rtrim($dir, '/').'/*', GLOB_NOSORT) as $each) { $size += is_file($each) ? filesize($each) : self::folderSize($each);}return $size; }
    static public function deleteOldFiles(string $dir,int $days=0)                       {$dir = self::standardizePath($dir);  if(!is_dir($dir)){ return; } $currentDate = 	dates::date();$lastDate = 	dates::addDay($currentDate, ($days * -1) );	 $cutOffDate =   new DateTime($lastDate); $di = new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS); $ri = new RecursiveIteratorIterator($di, RecursiveIteratorIterator::CHILD_FIRST);foreach ( $ri as $file ) { $fileDate = new DateTime(date('Y-m-d', $file->getMTime())); if ($fileDate <= $cutOffDate) { if ($file->isDir()) {  @rmdir($file->getPathname()); } else {  @unlink($file->getPathname()); }}}}
    static public function copyDirectory($source, $dest, $overwrite = true)              {if (is_dir($source) && !is_dir($dest)) {try {if (!mkdir($dest, self::$permission, true)) { sys::error('Failed to create folder '.$dir);  }  } catch (Exception $e) {   sys::error('Exception: '.$e->getMessage());}} if (is_dir($source)) {  $dir_handle = opendir($source); while ($file = readdir($dir_handle)) { if ($file != "." && $file != "..") {if (is_dir($source."/".$file)) {self::copyDirectory($source."/".$file, $dest."/".$file, $overwrite);} else { if ($overwrite || !file_exists($dest."/".$file)) {copy($source."/".$file, $dest."/".$file);}}}} closedir($dir_handle);  } else { if ($overwrite || !file_exists($dest)) {copy($source, $dest);}}}
    //############################################################################
    //file operations
    static public function isFile($path):bool				                                {if(is_file($path)){return true;} else {return false;}}
    static public function fileGetContents(string $url)				                        {$arrContextOptions=array("ssl"=>array("verify_peer"=>false,"verify_peer_name"=>false,"allow_self_signed"=>true,'verify_host'=>false),);return file_get_contents($url, false, stream_context_create($arrContextOptions));}
    static public function deleteFile(string $path)				                            {if(!is_file($path)){return;}unlink($path);}
    static public function filePutContents(string $path, string  $content)				    {self::deleteFile($path);file_put_contents($path, $content);@chmod($path, self::$permission);}
    static public function fileExtension(string $path):string				                {return pathinfo($path, PATHINFO_EXTENSION);}
    static public function convertSize(int $size)				                            {$sizes = array(" Bytes", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB"); if($size > 0){return (round($size/pow(1024, ($i = floor(log($size, 1024)))), 2) . $sizes[$i]);}else{return "0KB";}}
    static public function fileSize(string $path)				                            {if(!is_file($path)){return 0;}$size= filesize($path); return self::convertSize($size);}
    static public function dateModified(string $path) 			                            {if(is_file($path)){return date("Y-m-d H:i:s", filemtime($path));}else{return null;}}	
	static public function contentType(string  $filename):string		                    {$type="application/octet-stream";$ext = strtolower(self::fileExtension($filename));switch($ext){case "css":$type="text/css";break;case "bmp":$type="image/bmp";break;case "csv":$type="text/csv";break;case "doc":$type="application/msword";break;case "docx":$type="application/msword";break;case "gif":$type="image/gif";break;case "html":$type="text/html";break;case "html":$type="text/html";break;case "jpg":$type="image/jpeg";break;case "jpeg":$type="image/jpeg";break;case "js":$type="text/javascript";break;case "json":$type="application/json";break;case "mp3":$type="audio/mpeg";break;case "mp4":$type="application/mp4";break;case "mpeg":$type="video/mpeg";break;case "png":$type="image/png";break;case "pdf":$type="application/pdf";break;case "rtf":$type="application/rtf";break;case "svg":$type="image/svg+xml";break;case "ttf":$type="font/ttf";break;case "txt":$type="text/plain";break;case "wav":$type="audio/wav";break;case "xls":$type="application/vnd.ms-excel";break;case "xlsx":$type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";break;case "xml":$type="text/xml";break;case "zip":$type="application/zip";break;}return $type;}
    static public function downloadString(string  $filename,string  $string)	            {header("Content-type: ".self::contentType($filename));header('Content-Disposition: attachment; filename="'.$filename.'"');header("Content-Length: " . strlen($string));ob_clean();flush();echo $string;exit;}
    static public function downloadFile(string $path)					                    {if(!is_file($path)){ sys::error("No content was found for filename: ".$path); /* self::downloadString("nocontent.txt","No content was found for filename: ".$path);exit; */ } header_remove();header("Pragma: public");header("Expires: 0");header("Cache-Control: must-revalidate, post-check=0, pre-check=0");header("Cache-Control: public");header("Content-Description: File Transfer");header("Content-Disposition: attachment; filename=\"".basename($path)."\"");header("Content-Transfer-Encoding: binary");header("Content-Length: ".filesize($path));header("Content-type: ".self::contentType(basename($path)));ob_clean();flush();readfile($path);exit;}
    static public function setContentHeader(string $filename)                               {$type = self::contentType($filename); header('Content-Type: '.$type); }

    //#############################################################################
    //general operations
    static public function returnFilesData(array $files):array                              {$arrayFiles =  []; $arrayFiles['path']=  []; $arrayFiles['fileName']=  []; $arrayFiles['dateModified']= [];$arrayFiles['fileSize']=  [];$len = sizeof($files);for($n=0;$n<$len;$n++){$dateModified = null;$fileSize = null;if(self::isFile($files[$n])){$dateModified = self::dateModified($files[$n]);$fileSize =     self::fileSize($files[$n]);}array_push($arrayFiles['path'],$files[$n]);  array_push($arrayFiles['fileName'],basename($files[$n]));  array_push($arrayFiles['dateModified'],$dateModified);  array_push($arrayFiles['fileSize'],$fileSize); }  return $arrayFiles;} 
    static public function returnRenamedPath(string $path, string $newFileName):string      {$dir = pathinfo($path, PATHINFO_DIRNAME); return $dir . "/" . $newFileName;}

}

?>